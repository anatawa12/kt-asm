package com.anatawa12.asm

/**
 * Created by anatawa12 on 2019/12/21.
 */

/**
 * The version id of the class file.
 */
inline class ClassVersion constructor(val id: UInt) {
    constructor(minor: UShort, major: UShort) : this(minor.toUInt().shl(16).or(major.toUInt()))

    val minor: UShort get() = id.shr(16).toUShort()
    val major: UShort get() = id.toUShort()

    companion object {
        var V1_1 = ClassVersion(3u, 45u)
        var V1_2 = ClassVersion(0u, 46u)
        var V1_3 = ClassVersion(0u, 47u)
        var V1_4 = ClassVersion(0u, 48u)
        var V1_5 = ClassVersion(0u, 49u)
        var V1_6 = ClassVersion(0u, 50u)
        var V1_7 = ClassVersion(0u, 51u)
        var V1_8 = ClassVersion(0u, 52u)
        var V9 = ClassVersion(0u, 53u)
        var V10 = ClassVersion(0u, 54u)
        var V11 = ClassVersion(0u, 55u)
        var V12 = ClassVersion(0u, 56u)
        var V13 = ClassVersion(0u, 57u)
        var V14 = ClassVersion(0u, 58u)
    }
}

/**
 * The generic signature.
 * in the most nullable parameter typed [Signature], `null` if the type is not use generics.
 */
inline class Signature(val sig: String)

/**
 * the internal name. like 'java/lang/String'
 */
inline class InternalName(val name: String)

/**
 * the access flags for class file.
 */
typealias ClassAccessFlags = AccessFlags

/**
 * the access flags for field.
 */
typealias FieldAccessFlags = AccessFlags

/**
 * the access flags for method.
 */
typealias MethodAccessFlags = AccessFlags

/**
 * the access flags for inner class.
 */
typealias InnerClassAccessFlags = AccessFlags

/**
 * the access flags for module
 */
typealias ModuleFlags = AccessFlags

/**
 * the access flags
 */
inline class AccessFlags constructor(val flags: UShort) {
    operator fun plus(other: ModuleFlags): ModuleFlags = ModuleFlags(flags or other.flags)
    operator fun minus(other: ModuleFlags): ModuleFlags = ModuleFlags(flags and other.flags.inv())

    operator fun contains(other: ModuleFlags): Boolean = (flags and other.flags) == other.flags
    infix fun containsAny(other: ModuleFlags): Boolean = (flags and other.flags) != 0.toUShort()

    companion object {
        /**
         * Marked or implicitly public in source.
         */
        val ACC_PUBLIC = InnerClassAccessFlags(0x0001u)

        /**
         * Marked private in source.
         */
        val ACC_PRIVATE = InnerClassAccessFlags(0x0002u)

        /**
         * Marked protected in source.
         */
        val ACC_PROTECTED = InnerClassAccessFlags(0x0004u)

        /**
         * Marked or implicitly static in source.
         */
        val ACC_STATIC = InnerClassAccessFlags(0x0008u)

        /**
         * Marked or implicitly final in source.
         */
        val ACC_FINAL = InnerClassAccessFlags(0x0010u)

        /**
         * Indicates that this module is open.
         */
        val ACC_OPEN = ModuleFlags(0x0020u)

        /**
         * Declared synchronized; invocation is wrapped by a monitor use.
         */
        val ACC_SYNCHRONIZED = MethodAccessFlags(0x0020u)

        /**
         * Treat superclass methods specially when invoked by the invokespecial instruction.
         */
        val ACC_SUPER = ClassAccessFlags(0x0020u)

        /**
         * A bridge method, generated by the compiler.
         */
        val ACC_BRIDGE = MethodAccessFlags(0x0040u)

        /**
         * Declared volatile; cannot be cached.
         */
        val ACC_VOLATILE = FieldAccessFlags(0x0040u)

        /**
         * Declared with variable number of arguments.
         */
        val ACC_VARARGS = MethodAccessFlags(0x0080u)

        /**
         * Declared transient; not written or read by a persistent object manager.
         */
        val ACC_TRANSIENT = FieldAccessFlags(0x0080u)

        /**
         * Declared native; implemented in a language other than the Java programming language.
         */
        val ACC_NATIVE = MethodAccessFlags(0x0100u)

        /**
         * Was an interface in source.
         */
        val ACC_INTERFACE = InnerClassAccessFlags(0x0200u)

        /**
         * Marked or implicitly abstract in source.
         */
        val ACC_ABSTRACT = InnerClassAccessFlags(0x0400u)

        /**
         * Declared strictfp; floating-point mode is FP-strict.
         */
        val ACC_STRICT = MethodAccessFlags(0x0800u)

        /**
         * Declared synthetic; not present in the source code.
         */
        val ACC_SYNTHETIC = ModuleFlags(0x1000u)

        /**
         * Declared as an annotation type.
         */
        val ACC_ANNOTATION = InnerClassAccessFlags(0x2000u)

        /**
         * Declared as an enum type.
         */
        val ACC_ENUM = InnerClassAccessFlags(0x4000u)

        /**
         * Indicates that this module was implicitly declared.
         */
        val ACC_MANDATED = ModuleFlags(0x8000u)

        /**
         * Is a module, not a class or interface.
         */
        val ACC_MODULE = ClassAccessFlags(0x8000u)
    }
}
